#!/bin/bash

# Script prepares all sources for the minlog app and packages them into a
# self contained .tgz

# Verify that the script is being run from the proper directory
if [[ $(basename $PWD) != "minlog" ]]
then
  echo "$(basename $0) must be run from the offbrand/apps/minlog directory"
  exit 1
fi

# Make staging directory and binary directories
mkdir minlog
mkdir minlog/bin
mkdir minlog/bin/classes
mkdir minlog/bin/funct

# Copy all minlog files to the staging directory
cp -r include minlog
cp -r src minlog
cp README.txt minlog
cp scripts/Makefile minlog

# Copy all offbrand library files to the staging directory
cp ../../include/offbrand.h minlog/include
cp ../../src/offbrand_stdlib.c minlog/src/funct
cp ../../include/private/obj_private.h minlog/include/private
cp ../../include/obvector.h minlog/include
cp ../../include/private/obvector_private.h minlog/include/private
cp ../../src/classes/obvector.c minlog/src/classes

# edit include statements of headers in include directories to account for new
# directory structure
for file in minlog/include/*.h
do
  # remove the ../../../include/ portion of the header statements
  sed -i 's/\.\.\/\.\.\/\.\.\/include\///g' $file
done

# edit the offbrand_stdlib.c file to accomadate new include/src directory
# structure
sed -i 's/\.\.\//\.\.\/\.\.\//g' minlog/src/funct/offbrand_stdlib.c

# edit the main.c file to accomadate new include/src directory structure
sed -i 's/\.\.\/\.\.\/\.\.\//\.\.\//g' minlog/src/main.c

# pack the staging directory into a tarball
tar -czf minlog.tgz minlog/

# remove the staging directory files
rm -rf minlog
